import torch

"""
创建一个从 0 到 10（包括边界）的等间距数列，总共包含 4 个元素。
具体来说，torch.linspace() 函数使用以下参数：
    0：指定了数列的起始值为 0。
    10：指定了数列的结束值为 10。
    steps=4：指定了数列的总共包含 4 个元素。
"""
# tensor([ 0.0000,  3.3333,  6.6667, 10.0000])
print(torch.linspace(0, 10, steps=4))
# tensor([ 0.0000,  1.1111,  2.2222,  3.3333,  4.4444,  5.5556,  6.6667,  7.7778,
#          8.8889, 10.0000])
print(torch.linspace(0, 10, steps=10))
# tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])
print(torch.linspace(0, 10, steps=11))
"""
创建一个以 10 为底数的对数刻度上的等比数列，从 1 到 0.1（包括边界）总共包含 10 个元素。
具体来说，torch.logspace() 函数使用以下参数：
    0：指定了数列的起始值为 10^0 = 1。
    -1：指定了数列的结束值为 10^(-1) = 0.1。
    steps=10：指定了数列的总共包含 10 个元素。
"""
# tensor([1.0000, 0.7743, 0.5995, 0.4642, 0.3594, 0.2783, 0.2154, 0.1668, 0.1292,
#         0.1000])
print(torch.logspace(0, -1, steps=10))
"""
创建一个以 10 为底数的对数刻度上的等比数列，从 1 到 10（包括边界）总共包含 10 个元素。
具体来说，torch.logspace() 函数使用以下参数：
    0：指定了数列的起始值为 10^0 = 1。
    1：指定了数列的结束值为 10^1 = 10。
    steps=10：指定了数列的总共包含 10 个元素。
"""
# tensor([ 1.0000,  1.2915,  1.6681,  2.1544,  2.7826,  3.5938,  4.6416,  5.9948,
#          7.7426, 10.0000])
print(torch.logspace(0, 1, steps=10))


print('----------------------------------------------------------')
# 创建一个一维的张量，其中的元素值是从0到9的连续整数序列。
# tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
print(torch.arange(0, 10))
# 创建一个一维的张量，其中的元素值是从0到9的连续整数序列，步长为2。
# tensor([0, 2, 4, 6, 8])
print(torch.arange(0, 10, 2))
"""
用户警告：torch.range已被弃用，并将在未来的版本中删除，因为它的行为与Python的range内置内容不一致。相反，使用torch.arange，它在[start，end）中生成值。
在 PyTorch 中，没有名为 torch.range() 的函数。正确的函数是 torch.arange()，它可以实现类似的功能。
"""
# tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])
# print(torch.range(0, 10))


print('----------------------------------------------------------')
"""
用于创建一个形状为 (2, 3) 的张量，其中的每个元素都被填充为 7。
具体来说，torch.full() 函数使用以下参数：
    [2, 3]：指定了张量的形状为 (2, 3)，即 2 行 3 列的二维张量。
    7：指定了要填充的值为 7。
"""
# tensor([[7, 7, 7],
#         [7, 7, 7]])
print(torch.full([2, 3], 7))
"""
创建一个标量（零维张量），并将其填充为 7。
具体来说，torch.full() 函数使用以下参数：
    []：指定了张量的形状为空列表，表示创建一个零维张量，即标量。
    7：指定了要填充的值为 7。
"""
# tensor(7)
print(torch.full([], 7))
"""
用于创建一个形状为 (1,) 的张量，并将其填充为 7。
具体来说，torch.full() 函数使用以下参数：
    [1]：指定了张量的形状为长度为 1 的一维张量，即一个元素的向量。
    7：指定了要填充的值为 7。
"""
# tensor([7])
print(torch.full([1], 7))


print('----------------------------------------------------------')
# torch.randn(3, 3) 是 PyTorch 中的一个函数，主要用于创建指定形状的张量，并且张量中的元素是从标准正态分布（均值为 0，方差为 1）中抽取的随机数。
# tensor([[ 0.1841,  0.6816,  0.0501],
#         [ 0.9872, -0.5350,  0.5579],
#         [ 0.1218,  0.2478,  0.7946]])
print(torch.randn(3, 3))
"""
torch.normal() 是 PyTorch 中的一个函数，用于从给定的均值和标准差参数中抽取随机数，生成符合正态分布（高斯分布）的张量。

下面例子创建了一个形状为 (10,) 的张量，其中的每个元素都是从指定的正态分布中抽取的随机数。具体来说，该函数使用了以下参数：
    mean：均值参数，通过 torch.full([10],0) 创建了一个形状为 (10,) 的张量，其中的所有元素都是 0。
    std：标准差参数，通过 torch.arange(1, 0, -0.1) 创建了一个形状为 (10,) 的张量，其中的元素依次从 1 开始递减到 0，间隔为 0.1。

torch.normal() 函数生成的随机数是独立地抽取的，并且每个元素的值都是从对应位置的正态分布中抽取得到的。
"""
# tensor([ 0.4569, -0.6104, -0.1315, -0.4364,  0.2496,  0.2949, -0.5834, -0.2076,
#         -0.1470,  0.0141])
print(torch.normal(mean=torch.full([10], 0.), std=torch.arange(1, 0, -0.1)))
# tensor([ 1.4734,  0.4075,  0.5232, -0.1137, -0.6500, -0.2533, -0.4364, -0.0628,
#         -0.2284,  0.1040])
print(torch.normal(mean=torch.full([10], 0.), std=torch.arange(1, 0, -0.1)))
